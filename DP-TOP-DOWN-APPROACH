int knapsack(int wt[ ],int val[ ],int n,int W){
    if(n == 0 || W == 0) return 0;
    int dp[n+1][W+1];
    for(int i = 0;i<=n;i++){
        for(int j = 0;j<=W;j++){
            if(i == 0 || j == 0) dp[i][j] = 0;
            }
        }
        for(int i = 1;i<=n;i++){
            for(int j = 1;j<=W;j++){
                if(wt[i-1]<=j){
                    dp[i][j] = max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
                    }
                    else{
                        dp[i][j] = dp[i-1][j];
                        }
                }
            }
            return dp[n][W];
    }
int main(){
    int n,W;
    cin>>n>>W;
    int wt[n];
    int val[n];
    for(int i = 0;i<n;i++) cin>>wt[i];
    for(int i = 0;i<n;i++) cin>>val[i];
    int ans = knapsack(wt,val,n,W);
    cout<<ans<<endl;
    }
